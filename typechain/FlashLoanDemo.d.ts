/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface FlashLoanDemoInterface extends Interface {
  functions: {
    excecuteFlashLoan: TypedFunctionDescription<{ encode([]: []): string }>;

    executeOperation: TypedFunctionDescription<{
      encode([_token, _amount, _fee, _params]: [
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    flashLoanPool: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    poolA: TypedFunctionDescription<{ encode([]: []): string }>;

    poolB: TypedFunctionDescription<{ encode([]: []): string }>;

    tokenA: TypedFunctionDescription<{ encode([]: []): string }>;

    tokenB: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class FlashLoanDemo extends Contract {
  connect(signerOrProvider: Signer | Provider | string): FlashLoanDemo;
  attach(addressOrName: string): FlashLoanDemo;
  deployed(): Promise<FlashLoanDemo>;

  on(event: EventFilter | string, listener: Listener): FlashLoanDemo;
  once(event: EventFilter | string, listener: Listener): FlashLoanDemo;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): FlashLoanDemo;
  removeAllListeners(eventName: EventFilter | string): FlashLoanDemo;
  removeListener(eventName: any, listener: Listener): FlashLoanDemo;

  interface: FlashLoanDemoInterface;

  functions: {
    excecuteFlashLoan(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    executeOperation(
      _token: string,
      _amount: BigNumberish,
      _fee: BigNumberish,
      _params: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    flashLoanPool(): Promise<string>;

    owner(): Promise<string>;

    poolA(): Promise<string>;

    poolB(): Promise<string>;

    tokenA(): Promise<string>;

    tokenB(): Promise<string>;
  };

  excecuteFlashLoan(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  executeOperation(
    _token: string,
    _amount: BigNumberish,
    _fee: BigNumberish,
    _params: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  flashLoanPool(): Promise<string>;

  owner(): Promise<string>;

  poolA(): Promise<string>;

  poolB(): Promise<string>;

  tokenA(): Promise<string>;

  tokenB(): Promise<string>;

  filters: {};

  estimate: {
    excecuteFlashLoan(): Promise<BigNumber>;

    executeOperation(
      _token: string,
      _amount: BigNumberish,
      _fee: BigNumberish,
      _params: Arrayish
    ): Promise<BigNumber>;

    flashLoanPool(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    poolA(): Promise<BigNumber>;

    poolB(): Promise<BigNumber>;

    tokenA(): Promise<BigNumber>;

    tokenB(): Promise<BigNumber>;
  };
}
