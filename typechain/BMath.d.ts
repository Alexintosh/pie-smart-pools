/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BMathInterface extends Interface {
  functions: {
    BONE: TypedFunctionDescription<{ encode([]: []): string }>;

    BPOW_PRECISION: TypedFunctionDescription<{ encode([]: []): string }>;

    EXIT_FEE: TypedFunctionDescription<{ encode([]: []): string }>;

    INIT_POOL_SUPPLY: TypedFunctionDescription<{ encode([]: []): string }>;

    MAX_BOUND_TOKENS: TypedFunctionDescription<{ encode([]: []): string }>;

    MAX_BPOW_BASE: TypedFunctionDescription<{ encode([]: []): string }>;

    MAX_FEE: TypedFunctionDescription<{ encode([]: []): string }>;

    MAX_IN_RATIO: TypedFunctionDescription<{ encode([]: []): string }>;

    MAX_OUT_RATIO: TypedFunctionDescription<{ encode([]: []): string }>;

    MAX_TOTAL_WEIGHT: TypedFunctionDescription<{ encode([]: []): string }>;

    MAX_WEIGHT: TypedFunctionDescription<{ encode([]: []): string }>;

    MIN_BALANCE: TypedFunctionDescription<{ encode([]: []): string }>;

    MIN_BOUND_TOKENS: TypedFunctionDescription<{ encode([]: []): string }>;

    MIN_BPOW_BASE: TypedFunctionDescription<{ encode([]: []): string }>;

    MIN_FEE: TypedFunctionDescription<{ encode([]: []): string }>;

    MIN_WEIGHT: TypedFunctionDescription<{ encode([]: []): string }>;

    calcInGivenOut: TypedFunctionDescription<{
      encode([
        tokenBalanceIn,
        tokenWeightIn,
        tokenBalanceOut,
        tokenWeightOut,
        tokenAmountOut,
        swapFee
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    calcOutGivenIn: TypedFunctionDescription<{
      encode([
        tokenBalanceIn,
        tokenWeightIn,
        tokenBalanceOut,
        tokenWeightOut,
        tokenAmountIn,
        swapFee
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    calcPoolInGivenSingleOut: TypedFunctionDescription<{
      encode([
        tokenBalanceOut,
        tokenWeightOut,
        poolSupply,
        totalWeight,
        tokenAmountOut,
        swapFee
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    calcPoolOutGivenSingleIn: TypedFunctionDescription<{
      encode([
        tokenBalanceIn,
        tokenWeightIn,
        poolSupply,
        totalWeight,
        tokenAmountIn,
        swapFee
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    calcSingleInGivenPoolOut: TypedFunctionDescription<{
      encode([
        tokenBalanceIn,
        tokenWeightIn,
        poolSupply,
        totalWeight,
        poolAmountOut,
        swapFee
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    calcSingleOutGivenPoolIn: TypedFunctionDescription<{
      encode([
        tokenBalanceOut,
        tokenWeightOut,
        poolSupply,
        totalWeight,
        poolAmountIn,
        swapFee
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    calcSpotPrice: TypedFunctionDescription<{
      encode([
        tokenBalanceIn,
        tokenWeightIn,
        tokenBalanceOut,
        tokenWeightOut,
        swapFee
      ]: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class BMath extends Contract {
  connect(signerOrProvider: Signer | Provider | string): BMath;
  attach(addressOrName: string): BMath;
  deployed(): Promise<BMath>;

  on(event: EventFilter | string, listener: Listener): BMath;
  once(event: EventFilter | string, listener: Listener): BMath;
  addListener(eventName: EventFilter | string, listener: Listener): BMath;
  removeAllListeners(eventName: EventFilter | string): BMath;
  removeListener(eventName: any, listener: Listener): BMath;

  interface: BMathInterface;

  functions: {
    BONE(): Promise<BigNumber>;

    BPOW_PRECISION(): Promise<BigNumber>;

    EXIT_FEE(): Promise<BigNumber>;

    INIT_POOL_SUPPLY(): Promise<BigNumber>;

    MAX_BOUND_TOKENS(): Promise<BigNumber>;

    MAX_BPOW_BASE(): Promise<BigNumber>;

    MAX_FEE(): Promise<BigNumber>;

    MAX_IN_RATIO(): Promise<BigNumber>;

    MAX_OUT_RATIO(): Promise<BigNumber>;

    MAX_TOTAL_WEIGHT(): Promise<BigNumber>;

    MAX_WEIGHT(): Promise<BigNumber>;

    MIN_BALANCE(): Promise<BigNumber>;

    MIN_BOUND_TOKENS(): Promise<BigNumber>;

    MIN_BPOW_BASE(): Promise<BigNumber>;

    MIN_FEE(): Promise<BigNumber>;

    MIN_WEIGHT(): Promise<BigNumber>;

    calcInGivenOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;

    calcOutGivenIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;

    calcSpotPrice(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
  };

  BONE(): Promise<BigNumber>;

  BPOW_PRECISION(): Promise<BigNumber>;

  EXIT_FEE(): Promise<BigNumber>;

  INIT_POOL_SUPPLY(): Promise<BigNumber>;

  MAX_BOUND_TOKENS(): Promise<BigNumber>;

  MAX_BPOW_BASE(): Promise<BigNumber>;

  MAX_FEE(): Promise<BigNumber>;

  MAX_IN_RATIO(): Promise<BigNumber>;

  MAX_OUT_RATIO(): Promise<BigNumber>;

  MAX_TOTAL_WEIGHT(): Promise<BigNumber>;

  MAX_WEIGHT(): Promise<BigNumber>;

  MIN_BALANCE(): Promise<BigNumber>;

  MIN_BOUND_TOKENS(): Promise<BigNumber>;

  MIN_BPOW_BASE(): Promise<BigNumber>;

  MIN_FEE(): Promise<BigNumber>;

  MIN_WEIGHT(): Promise<BigNumber>;

  calcInGivenOut(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    tokenAmountOut: BigNumberish,
    swapFee: BigNumberish
  ): Promise<BigNumber>;

  calcOutGivenIn(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    tokenAmountIn: BigNumberish,
    swapFee: BigNumberish
  ): Promise<BigNumber>;

  calcPoolInGivenSingleOut(
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    tokenAmountOut: BigNumberish,
    swapFee: BigNumberish
  ): Promise<BigNumber>;

  calcPoolOutGivenSingleIn(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    tokenAmountIn: BigNumberish,
    swapFee: BigNumberish
  ): Promise<BigNumber>;

  calcSingleInGivenPoolOut(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    poolAmountOut: BigNumberish,
    swapFee: BigNumberish
  ): Promise<BigNumber>;

  calcSingleOutGivenPoolIn(
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    poolSupply: BigNumberish,
    totalWeight: BigNumberish,
    poolAmountIn: BigNumberish,
    swapFee: BigNumberish
  ): Promise<BigNumber>;

  calcSpotPrice(
    tokenBalanceIn: BigNumberish,
    tokenWeightIn: BigNumberish,
    tokenBalanceOut: BigNumberish,
    tokenWeightOut: BigNumberish,
    swapFee: BigNumberish
  ): Promise<BigNumber>;

  filters: {};

  estimate: {
    BONE(): Promise<BigNumber>;

    BPOW_PRECISION(): Promise<BigNumber>;

    EXIT_FEE(): Promise<BigNumber>;

    INIT_POOL_SUPPLY(): Promise<BigNumber>;

    MAX_BOUND_TOKENS(): Promise<BigNumber>;

    MAX_BPOW_BASE(): Promise<BigNumber>;

    MAX_FEE(): Promise<BigNumber>;

    MAX_IN_RATIO(): Promise<BigNumber>;

    MAX_OUT_RATIO(): Promise<BigNumber>;

    MAX_TOTAL_WEIGHT(): Promise<BigNumber>;

    MAX_WEIGHT(): Promise<BigNumber>;

    MIN_BALANCE(): Promise<BigNumber>;

    MIN_BOUND_TOKENS(): Promise<BigNumber>;

    MIN_BPOW_BASE(): Promise<BigNumber>;

    MIN_FEE(): Promise<BigNumber>;

    MIN_WEIGHT(): Promise<BigNumber>;

    calcInGivenOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;

    calcOutGivenIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;

    calcPoolInGivenSingleOut(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;

    calcPoolOutGivenSingleIn(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      tokenAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;

    calcSingleInGivenPoolOut(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;

    calcSingleOutGivenPoolIn(
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      poolSupply: BigNumberish,
      totalWeight: BigNumberish,
      poolAmountIn: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;

    calcSpotPrice(
      tokenBalanceIn: BigNumberish,
      tokenWeightIn: BigNumberish,
      tokenBalanceOut: BigNumberish,
      tokenWeightOut: BigNumberish,
      swapFee: BigNumberish
    ): Promise<BigNumber>;
  };
}
