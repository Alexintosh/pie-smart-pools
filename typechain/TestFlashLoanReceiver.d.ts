/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface TestFlashLoanReceiverInterface extends Interface {
  functions: {
    amount: TypedFunctionDescription<{ encode([]: []): string }>;

    amountReceived: TypedFunctionDescription<{ encode([]: []): string }>;

    excecuteFlashLoan: TypedFunctionDescription<{
      encode([_pool, _token, _amount, _params]: [
        string,
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    executeOperation: TypedFunctionDescription<{
      encode([_token, _amount, _fee, _params]: [
        string,
        BigNumberish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    fee: TypedFunctionDescription<{ encode([]: []): string }>;

    params: TypedFunctionDescription<{ encode([]: []): string }>;

    pool: TypedFunctionDescription<{ encode([]: []): string }>;

    token: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class TestFlashLoanReceiver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): TestFlashLoanReceiver;
  attach(addressOrName: string): TestFlashLoanReceiver;
  deployed(): Promise<TestFlashLoanReceiver>;

  on(event: EventFilter | string, listener: Listener): TestFlashLoanReceiver;
  once(event: EventFilter | string, listener: Listener): TestFlashLoanReceiver;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): TestFlashLoanReceiver;
  removeAllListeners(eventName: EventFilter | string): TestFlashLoanReceiver;
  removeListener(eventName: any, listener: Listener): TestFlashLoanReceiver;

  interface: TestFlashLoanReceiverInterface;

  functions: {
    amount(): Promise<BigNumber>;

    amountReceived(): Promise<BigNumber>;

    excecuteFlashLoan(
      _pool: string,
      _token: string,
      _amount: BigNumberish,
      _params: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    executeOperation(
      _token: string,
      _amount: BigNumberish,
      _fee: BigNumberish,
      _params: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    fee(): Promise<BigNumber>;

    params(): Promise<string>;

    pool(): Promise<string>;

    token(): Promise<string>;
  };

  amount(): Promise<BigNumber>;

  amountReceived(): Promise<BigNumber>;

  excecuteFlashLoan(
    _pool: string,
    _token: string,
    _amount: BigNumberish,
    _params: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  executeOperation(
    _token: string,
    _amount: BigNumberish,
    _fee: BigNumberish,
    _params: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  fee(): Promise<BigNumber>;

  params(): Promise<string>;

  pool(): Promise<string>;

  token(): Promise<string>;

  filters: {};

  estimate: {
    amount(): Promise<BigNumber>;

    amountReceived(): Promise<BigNumber>;

    excecuteFlashLoan(
      _pool: string,
      _token: string,
      _amount: BigNumberish,
      _params: Arrayish
    ): Promise<BigNumber>;

    executeOperation(
      _token: string,
      _amount: BigNumberish,
      _fee: BigNumberish,
      _params: Arrayish
    ): Promise<BigNumber>;

    fee(): Promise<BigNumber>;

    params(): Promise<BigNumber>;

    pool(): Promise<BigNumber>;

    token(): Promise<BigNumber>;
  };
}
